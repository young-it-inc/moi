<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.youngit.office.api.member.mapper.MemberMapper">

    <!-- 검색 조건 -->
    <sql id="searchMember">
        <if test="searchKey != null and searchKey != ''">
            <choose>
                <when test="searchKey == 'member_id'">
                    and member_id LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'member_name'">
                    and member_name LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'member_phone_number'">
                    and member_phone_number LIKE CONCAT('%', #{searchValue}, '%')
                </when>
            </choose>
        </if>
        <if test="department != null and department != ''">
            and department_code = #{department}
        </if>
    </sql>

    <!-- 회원 리스트 조회 및 검색 -->
    <select id="getOrSearchListMember" parameterType="MemberSearchDto" resultType="MemberModel">
        select *
        from o_member
        where
        member_status = 'P'
        <include refid="searchMember"/>
    </select>

    <!-- 회원 리스트 조회 및 검색 카운트 -->
    <select id="countGetOrSearchListMember" resultType="int">
        select count(*)
        from o_member
        <where>
            member_status = 'P'
            <include refid="searchMember"/>
        </where>
    </select>

    <!-- 회원 개별 조회 -->
    <select id="getOneMember" resultType="MemberModel">
    select *
    from o_member
    where member_id = #{memberId}
    </select>

    <!-- 회원 등록 -->
    <insert id="registerMember" parameterType="MemberModel">
        INSERT INTO o_member (member_id, password, password_question, password_answer, member_name,
                              member_email, member_phone_number, member_cellphone_number, member_status, member_type_code,
                              group_id, authority_code, sign_up_at, member_uniq_id, position_code,
                              department_code, task_code, cooperative_id)
        values (#{memberId},#{password},#{passwordQuestion},#{passwordAnswer},#{memberName},
                #{memberEmail}, #{memberPhoneNumber}, #{memberCellphoneNumber}, #{memberStatus}, #{memberTypeCode},
                #{groupId}, #{authorityCode}, #{signUpAt}, #{memberUniqId}, #{positionCode}, 
                #{departmentCode}, #{taskCode}, #{cooperativeId})
    </insert>

    <!-- 회원 수정 -->
    <update id="updateMember" parameterType="MemberModel">
        UPDATE o_member
        SET
        <if test="name != null and name !=''">
            name = #{name},
        </if>
        <if test="email != null and email !=''">
            email = #{email},
        </if>
        <if test="password != null and password !=''">
            password = #{password},
        </if>
        <if test="phoneNumber != null and phoneNumber !=''">
            phone_number = #{phoneNumber},
        </if>
        <if test="status != null and status !=''">
            status = #{status},
        </if>
        <if test="authorityCode != null and authorityCode !=''">
            authority_code = #{authorityCode},
        </if>
        <if test="positionCode != null and positionCode !=''">
            position_code = #{positionCode},
        </if>
        <if test="departmentCode != null and departmentCode !=''">
            department_code = #{departmentCode},
        </if>
        <if test="taskCode != null and taskCode !=''">
            task_code = #{taskCode},
        </if>
        <if test="typeCode != null and typeCode !=''">
            type_code = #{typeCode},
        </if>
        <if test="memberUniqId != null and memberUniqId !=''">
            member_uniq_id = #{memberUniqId},
        </if>
        update_at = CURRENT_TIMESTAMP(3)
        where member_id = #{memberId}
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword" parameterType="MemberModel">
        UPDATE o_member
        set
            password = #{password}
        where member_id = #{memberId}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteMember" parameterType="String">
        DELETE FROM o_member where member_id = #{memberId}
    </delete>

    <!-- 회원 아이디 중복 체크 -->
    <select id="findExistMemberId" parameterType="String" resultType="boolean">
        select count(*) > 0
        from o_member
        where member_id = #{memberId}
    </select>

    <!-- 로그인 -->
    <select id="login" parameterType="MemberModel" resultType="MemberModel">
        select *
        from o_member
        where member_id = #{memberId} and password = #{password}
    </select>

    <!-- 최근 회원 고유ID 조회 -->
    <select id="getLastMemberUniqId" resultType="String">
        SELECT MAX(member_uniq_id)
        FROM o_member
    </select>

</mapper>